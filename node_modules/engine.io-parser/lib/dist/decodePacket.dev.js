"use strict";

var _require = require("./commons"),
    PACKET_TYPES_REVERSE = _require.PACKET_TYPES_REVERSE,
    ERROR_PACKET = _require.ERROR_PACKET;

var decodePacket = function decodePacket(encodedPacket, binaryType) {
  if (typeof encodedPacket !== "string") {
    return {
      type: "message",
      data: mapBinary(encodedPacket, binaryType)
    };
  }

  var type = encodedPacket.charAt(0);

  if (type === "b") {
    var buffer = Buffer.from(encodedPacket.substring(1), "base64");
    return {
      type: "message",
      data: mapBinary(buffer, binaryType)
    };
  }

  if (!PACKET_TYPES_REVERSE[type]) {
    return ERROR_PACKET;
  }

  return encodedPacket.length > 1 ? {
    type: PACKET_TYPES_REVERSE[type],
    data: encodedPacket.substring(1)
  } : {
    type: PACKET_TYPES_REVERSE[type]
  };
};

var mapBinary = function mapBinary(data, binaryType) {
  var isBuffer = Buffer.isBuffer(data);

  switch (binaryType) {
    case "arraybuffer":
      return isBuffer ? toArrayBuffer(data) : data;

    case "nodebuffer":
    default:
      return data;
    // assuming the data is already a Buffer
  }
};

var toArrayBuffer = function toArrayBuffer(buffer) {
  var arrayBuffer = new ArrayBuffer(buffer.length);
  var view = new Uint8Array(arrayBuffer);

  for (var i = 0; i < buffer.length; i++) {
    view[i] = buffer[i];
  }

  return arrayBuffer;
};

module.exports = decodePacket;