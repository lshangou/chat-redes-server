"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Adapter = void 0;

var events_1 = require("events");

var Adapter =
/*#__PURE__*/
function (_events_1$EventEmitte) {
  _inherits(Adapter, _events_1$EventEmitte);

  /**
   * In-memory adapter constructor.
   *
   * @param {Namespace} nsp
   */
  function Adapter(nsp) {
    var _this;

    _classCallCheck(this, Adapter);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Adapter).call(this));
    _this.nsp = nsp;
    _this.rooms = new Map();
    _this.sids = new Map();
    _this.encoder = nsp.server.encoder;
    return _this;
  }
  /**
   * To be overridden
   */


  _createClass(Adapter, [{
    key: "init",
    value: function init() {}
    /**
     * To be overridden
     */

  }, {
    key: "close",
    value: function close() {}
    /**
     * Adds a socket to a list of room.
     *
     * @param {SocketId}  id      the socket id
     * @param {Set<Room>} rooms   a set of rooms
     * @public
     */

  }, {
    key: "addAll",
    value: function addAll(id, rooms) {
      if (!this.sids.has(id)) {
        this.sids.set(id, new Set());
      }

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = rooms[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var room = _step.value;
          this.sids.get(id).add(room);

          if (!this.rooms.has(room)) {
            this.rooms.set(room, new Set());
            this.emit("create-room", room);
          }

          if (!this.rooms.get(room).has(id)) {
            this.rooms.get(room).add(id);
            this.emit("join-room", room, id);
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }
    /**
     * Removes a socket from a room.
     *
     * @param {SocketId} id     the socket id
     * @param {Room}     room   the room name
     */

  }, {
    key: "del",
    value: function del(id, room) {
      if (this.sids.has(id)) {
        this.sids.get(id)["delete"](room);
      }

      this._del(room, id);
    }
  }, {
    key: "_del",
    value: function _del(room, id) {
      if (this.rooms.has(room)) {
        var deleted = this.rooms.get(room)["delete"](id);

        if (deleted) {
          this.emit("leave-room", room, id);
        }

        if (this.rooms.get(room).size === 0) {
          this.rooms["delete"](room);
          this.emit("delete-room", room);
        }
      }
    }
    /**
     * Removes a socket from all rooms it's joined.
     *
     * @param {SocketId} id   the socket id
     */

  }, {
    key: "delAll",
    value: function delAll(id) {
      if (!this.sids.has(id)) {
        return;
      }

      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = this.sids.get(id)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var room = _step2.value;

          this._del(room, id);
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      this.sids["delete"](id);
    }
    /**
     * Broadcasts a packet.
     *
     * Options:
     *  - `flags` {Object} flags for this packet
     *  - `except` {Array} sids that should be excluded
     *  - `rooms` {Array} list of rooms to broadcast to
     *
     * @param {Object} packet   the packet object
     * @param {Object} opts     the options
     * @public
     */

  }, {
    key: "broadcast",
    value: function broadcast(packet, opts) {
      var flags = opts.flags || {};
      var packetOpts = {
        preEncoded: true,
        "volatile": flags["volatile"],
        compress: flags.compress
      };
      packet.nsp = this.nsp.name;
      var encodedPackets = this.encoder.encode(packet);
      var firstPacketOpts = Object.assign({
        wsPreEncoded: "4" + encodedPackets[0]
      }, packetOpts);
      this.apply(opts, function (socket) {
        socket.client.writeToEngine(encodedPackets[0], firstPacketOpts);

        for (var i = 1; i < encodedPackets.length; i++) {
          socket.client.writeToEngine(encodedPackets[i], packetOpts);
        }
      });
    }
    /**
     * Gets a list of sockets by sid.
     *
     * @param {Set<Room>} rooms   the explicit set of rooms to check.
     */

  }, {
    key: "sockets",
    value: function sockets(rooms) {
      var sids = new Set();
      this.apply({
        rooms: rooms
      }, function (socket) {
        sids.add(socket.id);
      });
      return Promise.resolve(sids);
    }
    /**
     * Gets the list of rooms a given socket has joined.
     *
     * @param {SocketId} id   the socket id
     */

  }, {
    key: "socketRooms",
    value: function socketRooms(id) {
      return this.sids.get(id);
    }
    /**
     * Returns the matching socket instances
     *
     * @param opts - the filters to apply
     */

  }, {
    key: "fetchSockets",
    value: function fetchSockets(opts) {
      var sockets = [];
      this.apply(opts, function (socket) {
        sockets.push(socket);
      });
      return Promise.resolve(sockets);
    }
    /**
     * Makes the matching socket instances join the specified rooms
     *
     * @param opts - the filters to apply
     * @param rooms - the rooms to join
     */

  }, {
    key: "addSockets",
    value: function addSockets(opts, rooms) {
      this.apply(opts, function (socket) {
        socket.join(rooms);
      });
    }
    /**
     * Makes the matching socket instances leave the specified rooms
     *
     * @param opts - the filters to apply
     * @param rooms - the rooms to leave
     */

  }, {
    key: "delSockets",
    value: function delSockets(opts, rooms) {
      this.apply(opts, function (socket) {
        rooms.forEach(function (room) {
          return socket.leave(room);
        });
      });
    }
    /**
     * Makes the matching socket instances disconnect
     *
     * @param opts - the filters to apply
     * @param close - whether to close the underlying connection
     */

  }, {
    key: "disconnectSockets",
    value: function disconnectSockets(opts, close) {
      this.apply(opts, function (socket) {
        socket.disconnect(close);
      });
    }
  }, {
    key: "apply",
    value: function apply(opts, callback) {
      var rooms = opts.rooms;
      var except = this.computeExceptSids(opts.except);

      if (rooms.size) {
        var ids = new Set();
        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
          for (var _iterator3 = rooms[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var room = _step3.value;
            if (!this.rooms.has(room)) continue;
            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
              for (var _iterator4 = this.rooms.get(room)[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                var id = _step4.value;
                if (ids.has(id) || except.has(id)) continue;
                var socket = this.nsp.sockets.get(id);

                if (socket) {
                  callback(socket);
                  ids.add(id);
                }
              }
            } catch (err) {
              _didIteratorError4 = true;
              _iteratorError4 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
                  _iterator4["return"]();
                }
              } finally {
                if (_didIteratorError4) {
                  throw _iteratorError4;
                }
              }
            }
          }
        } catch (err) {
          _didIteratorError3 = true;
          _iteratorError3 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
              _iterator3["return"]();
            }
          } finally {
            if (_didIteratorError3) {
              throw _iteratorError3;
            }
          }
        }
      } else {
        var _iteratorNormalCompletion5 = true;
        var _didIteratorError5 = false;
        var _iteratorError5 = undefined;

        try {
          for (var _iterator5 = this.sids[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
            var _step5$value = _slicedToArray(_step5.value, 1),
                _id = _step5$value[0];

            if (except.has(_id)) continue;

            var _socket = this.nsp.sockets.get(_id);

            if (_socket) callback(_socket);
          }
        } catch (err) {
          _didIteratorError5 = true;
          _iteratorError5 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
              _iterator5["return"]();
            }
          } finally {
            if (_didIteratorError5) {
              throw _iteratorError5;
            }
          }
        }
      }
    }
  }, {
    key: "computeExceptSids",
    value: function computeExceptSids(exceptRooms) {
      var exceptSids = new Set();

      if (exceptRooms && exceptRooms.size > 0) {
        var _iteratorNormalCompletion6 = true;
        var _didIteratorError6 = false;
        var _iteratorError6 = undefined;

        try {
          for (var _iterator6 = exceptRooms[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
            var room = _step6.value;

            if (this.rooms.has(room)) {
              this.rooms.get(room).forEach(function (sid) {
                return exceptSids.add(sid);
              });
            }
          }
        } catch (err) {
          _didIteratorError6 = true;
          _iteratorError6 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion6 && _iterator6["return"] != null) {
              _iterator6["return"]();
            }
          } finally {
            if (_didIteratorError6) {
              throw _iteratorError6;
            }
          }
        }
      }

      return exceptSids;
    }
    /**
     * Send a packet to the other Socket.IO servers in the cluster
     * @param packet - an array of arguments, which may include an acknowledgement callback at the end
     */

  }, {
    key: "serverSideEmit",
    value: function serverSideEmit(packet) {
      throw new Error("this adapter does not support the serverSideEmit() functionality");
    }
  }]);

  return Adapter;
}(events_1.EventEmitter);

exports.Adapter = Adapter;