"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Transport = require("../transport");

var debug = require("debug")("engine:ws");

var WebSocket =
/*#__PURE__*/
function (_Transport) {
  _inherits(WebSocket, _Transport);

  /**
   * WebSocket transport
   *
   * @param {http.IncomingMessage}
   * @api public
   */
  function WebSocket(req) {
    var _this;

    _classCallCheck(this, WebSocket);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(WebSocket).call(this, req));
    _this.socket = req.websocket;

    _this.socket.on("message", _this.onData.bind(_assertThisInitialized(_this)));

    _this.socket.once("close", _this.onClose.bind(_assertThisInitialized(_this)));

    _this.socket.on("error", _this.onError.bind(_assertThisInitialized(_this)));

    _this.writable = true;
    _this.perMessageDeflate = null;
    return _this;
  }
  /**
   * Transport name
   *
   * @api public
   */


  _createClass(WebSocket, [{
    key: "onData",

    /**
     * Processes the incoming data.
     *
     * @param {String} encoded packet
     * @api private
     */
    value: function onData(data) {
      debug('received "%s"', data);

      _get(_getPrototypeOf(WebSocket.prototype), "onData", this).call(this, data);
    }
    /**
     * Writes a packet payload.
     *
     * @param {Array} packets
     * @api private
     */

  }, {
    key: "send",
    value: function send(packets) {
      var _this2 = this;

      var packet = packets.shift();

      if (typeof packet === "undefined") {
        this.writable = true;
        this.emit("drain");
        return;
      } // always creates a new object since ws modifies it


      var opts = {};

      if (packet.options) {
        opts.compress = packet.options.compress;
      }

      var send = function send(data) {
        if (_this2.perMessageDeflate) {
          var len = "string" === typeof data ? Buffer.byteLength(data) : data.length;

          if (len < _this2.perMessageDeflate.threshold) {
            opts.compress = false;
          }
        }

        debug('writing "%s"', data);
        _this2.writable = false;

        _this2.socket.send(data, opts, function (err) {
          if (err) return _this2.onError("write error", err.stack);

          _this2.send(packets);
        });
      };

      if (packet.options && typeof packet.options.wsPreEncoded === "string") {
        send(packet.options.wsPreEncoded);
      } else {
        this.parser.encodePacket(packet, this.supportsBinary, send);
      }
    }
    /**
     * Closes the transport.
     *
     * @api private
     */

  }, {
    key: "doClose",
    value: function doClose(fn) {
      debug("closing");
      this.socket.close();
      fn && fn();
    }
  }, {
    key: "name",
    get: function get() {
      return "websocket";
    }
    /**
     * Advertise upgrade support.
     *
     * @api public
     */

  }, {
    key: "handlesUpgrades",
    get: function get() {
      return true;
    }
    /**
     * Advertise framing support.
     *
     * @api public
     */

  }, {
    key: "supportsFraming",
    get: function get() {
      return true;
    }
  }]);

  return WebSocket;
}(Transport);

module.exports = WebSocket;