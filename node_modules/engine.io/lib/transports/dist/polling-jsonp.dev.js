"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Polling = require("./polling");

var qs = require("querystring");

var rDoubleSlashes = /\\\\n/g;
var rSlashes = /(\\)?\\n/g;

var JSONP =
/*#__PURE__*/
function (_Polling) {
  _inherits(JSONP, _Polling);

  /**
   * JSON-P polling transport.
   *
   * @api public
   */
  function JSONP(req) {
    var _this;

    _classCallCheck(this, JSONP);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(JSONP).call(this, req));
    _this.head = "___eio[" + (req._query.j || "").replace(/[^0-9]/g, "") + "](";
    _this.foot = ");";
    return _this;
  }
  /**
   * Handles incoming data.
   * Due to a bug in \n handling by browsers, we expect a escaped string.
   *
   * @api private
   */


  _createClass(JSONP, [{
    key: "onData",
    value: function onData(data) {
      // we leverage the qs module so that we get built-in DoS protection
      // and the fast alternative to decodeURIComponent
      data = qs.parse(data).d;

      if ("string" === typeof data) {
        // client will send already escaped newlines as \\\\n and newlines as \\n
        // \\n must be replaced with \n and \\\\n with \\n
        data = data.replace(rSlashes, function (match, slashes) {
          return slashes ? match : "\n";
        });

        _get(_getPrototypeOf(JSONP.prototype), "onData", this).call(this, data.replace(rDoubleSlashes, "\\n"));
      }
    }
    /**
     * Performs the write.
     *
     * @api private
     */

  }, {
    key: "doWrite",
    value: function doWrite(data, options, callback) {
      // we must output valid javascript, not valid json
      // see: http://timelessrepo.com/json-isnt-a-javascript-subset
      var js = JSON.stringify(data).replace(/\u2028/g, "\\u2028").replace(/\u2029/g, "\\u2029"); // prepare response

      data = this.head + js + this.foot;

      _get(_getPrototypeOf(JSONP.prototype), "doWrite", this).call(this, data, options, callback);
    }
  }]);

  return JSONP;
}(Polling);

module.exports = JSONP;